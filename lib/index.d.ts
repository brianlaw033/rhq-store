export * from "./createStore";
export * from "./remotehq";
export * from "./storedItem";
export * from "./storeType";
export * from "./helpers";
export * from "./types";
export * from "./sequenceHandler";
export * from "./ProcessStatusManager";
export * from "./context";
export * from "./editContext";
export * from "./Forms";
export * from "./classes";
export declare const dumpSchema: () => void, getSchema: () => import("./types").ISchemaStorageArray, getSchemaArray: () => import("./storeType").storeType[], getSchemaArrayAlpha: () => import("./storedItem").storedItem[], createEditContext: (name: string) => import("./storedItem").storedItem | undefined, removeEditContext: (context: import("./editContext").editContext) => void, getContext: (key: any) => import("./context").context | null, userChanged: (newUserID: string) => void, registerDataType: (type: string, remoteURL?: URL | undefined, createRemote?: boolean | undefined, retrieveRemote?: boolean | undefined, updateRemote?: boolean | undefined, deleteRemote?: boolean | undefined) => import("./storeType").storeType, registerSingleItem: (type: string, storeSesstion: Boolean, storeLocal: Boolean, maxAgeLocal: number | null, remoteURL?: URL | undefined, createRemote?: boolean | undefined, retrieveRemote?: boolean | undefined, updateRemote?: boolean | undefined, deleteRemote?: boolean | undefined) => import("./storeType").storeType, registerSingleUserItem: (type: string, storeSesstion: Boolean, storeLocal: Boolean, maxAgeLocal: number | null, remoteURL?: URL | undefined, createRemote?: boolean | undefined, retrieveRemote?: boolean | undefined, updateRemote?: boolean | undefined, deleteRemote?: boolean | undefined) => import("./storeType").storeType, instanceItem: (type: string, data?: any) => import("./storedItem").storedItem | null, instanceNewItem: (type: string, data?: any) => import("./storedItem").storedItem | null, init: (type: string) => import("./storedItem").storedItem | null, save: () => void, registerOnChange: (name: string, call: Function) => import("./storeType").storeType | null, registerOnSave: (name: string, call: Function) => import("./storeType").storeType | null, registerOnDelete: (name: string, call: Function) => import("./storeType").storeType | null, getStoreTypeByName: (name: string, createMissing?: boolean | undefined) => import("./storeType").storeType | null, clearAllStoreCache: () => void, clearStoreCache: (name: string) => void, removeOnChange: (name: string, call: Function) => import("./storeType").storeType | null, removeOnRetrieve: (name: string, call: Function) => import("./storeType").storeType | null, removeOnSave: (name: string, call: Function) => import("./storeType").storeType | null, removeOnDelete: (name: string, call: Function) => import("./storeType").storeType | null, getAllStoreTypes: () => import("./types").ISchemaStorageArray, setItem: (type: string, items: string | {
    [key: string]: any;
}, data?: any) => void | undefined, storeData: (type: string, items: string | {
    [key: string]: any;
}, data?: any) => void | undefined, getAll: (type: string) => import("./types").IManagedItem[], requestLoad: (type: string, changeCallbackFn?: import("./types").ChangeCallbackFunction | undefined, retrieveCallbackFn?: import("./types").ChangeCallbackFunction | undefined) => import("./storeType").storeType | null, getItem: (type: string, key: string) => Promise<string | import("./storedItem").storedItem | null | undefined>, itemByKey: (type: string, key: string) => import("./storedItem").storedItem | undefined, getPropertyArray: (type: string, keys: [string], column: string) => any, updateItemNewUser: (type: string, key: string) => Promise<void | undefined>, getAccessToken: () => Promise<string>, accessTokenSync: () => string | null, fetchDataAuthorised: (url: URL, key?: string | undefined, queryString?: string | null | undefined) => Promise<any>, sendDataAuthorised: (url: URL, method: string, data: string, callback: Function, key?: string | undefined, queryString?: string | null | undefined) => Promise<any>, loadTables: (endpoint: string) => Promise<void>, putTablesIntoSchemaItems: (type: string, key: string, data: any) => Promise<void>, call: (name: string, ...args: any[]) => any, callAsync: (name: string, ...args: any[]) => Promise<any>, registerCall: (name: string, fn: any, awaitMapAvailable?: boolean | undefined) => void, registerCalls: (calls: {
    [key: string]: any;
}) => void, removeCall: (name: string) => void, removeCalls: (calls: {
    [key: string]: any;
}) => void, getGlobalState: (name: string) => import("./storedItem").storedItem | undefined, setGlobalState: (name: string | {
    [key: string]: any;
}, value?: any) => Promise<void>, getStateValue: (name: string) => any, getStateArrayValue: (name: string, defaultValue?: [] | undefined) => any[], getStateFirstValue: (name: string, defaultValue?: any) => any, registerforStateChanges: (fn: any) => void, removeStateChanges: (fn: any) => void, dumpDataType: (type: string, level: import("./types").messageLevels) => void, isStoredItem: (item: any) => boolean, getPropertyArrayFromItemArray: (items: import("./storedItem").storedItem[], column: string) => any, getPropertiesArrayFromItemArray: (items: import("./storedItem").storedItem[], columns: string[]) => any, getPropertyArrayFromItemArrayUnique: (items: import("./storedItem").storedItem[], column: string) => any, isItemType: (item: any, type: string, isLike?: boolean | undefined) => boolean, itemWillSend: (item: import("./storedItem").storedItem | import("./storeType").storeType, message?: string | undefined) => void, typeWillRetrieve: (item: import("./storedItem").storedItem | import("./storeType").storeType, message?: string | undefined) => void, itemIsSent: (item: import("./storedItem").storedItem | import("./storeType").storeType, message: string) => void, typeIsRetrieved: (item: import("./storedItem").storedItem | import("./storeType").storeType, message: string) => void, typeRetrieveFailed: (item: import("./storedItem").storedItem | import("./storeType").storeType, message: string) => void, itemSendSucceeed: (item: import("./storedItem").storedItem | import("./storeType").storeType, message: string) => void, itemSendFailed: (item: import("./storedItem").storedItem | import("./storeType").storeType, message: string) => void, sendsInProgress: () => boolean, sendsToGo: () => number, lastSentMessage: () => number, itemsToSendMessageList: () => string[], lastProcessMessage: () => string, processPercentComplete: () => number, flushStatusMessages: () => void, toSendMessages: () => import("./ProcessStatusManager").statusMessage[], completedMessages: () => import("./ProcessStatusManager").statusMessage[], failedMessages: () => import("./ProcessStatusManager").statusMessage[], registerOnProcessChange: (call: Function) => void, removeOnProcessChange: (call: Function) => void, dumpCompletedActions: () => void, dumpToDo: () => void, isUUID: (theString: string) => boolean, dateStripTimezone: (date: Date | null) => Date | null, dateAddTimezone: (date: Date | null) => Date | null, selectedConsentNumber: () => any, initializeProcessStatusManager: () => void;
